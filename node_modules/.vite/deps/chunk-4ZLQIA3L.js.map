{
  "version": 3,
  "sources": ["../../@codesandbox/sandpack-client/dist/client.utils-7a723432.mjs"],
  "sourcesContent": ["import { invariant } from 'outvariant';\nimport { c as createError } from './types-36e5ec0d.mjs';\n\nvar EventEmitter = /** @class */ (function () {\n    function EventEmitter() {\n        this.listeners = {};\n        this.listenersCount = 0;\n        this.channelId = Math.floor(Math.random() * 1000000);\n        this.listeners = [];\n    }\n    EventEmitter.prototype.cleanup = function () {\n        this.listeners = {};\n        this.listenersCount = 0;\n    };\n    EventEmitter.prototype.dispatch = function (message) {\n        Object.values(this.listeners).forEach(function (listener) { return listener(message); });\n    };\n    EventEmitter.prototype.listener = function (listener) {\n        var _this = this;\n        if (typeof listener !== \"function\") {\n            return function () {\n                return;\n            };\n        }\n        var listenerId = this.listenersCount;\n        this.listeners[listenerId] = listener;\n        this.listenersCount++;\n        return function () {\n            delete _this.listeners[listenerId];\n        };\n    };\n    return EventEmitter;\n}());\n\nfunction isCommand(char) {\n    return /[a-zA-Z.]/.test(char);\n}\nfunction isAlpha(char) {\n    return /[a-zA-Z]/.test(char);\n}\nfunction isWhitespace(char) {\n    return /\\s/.test(char);\n}\nfunction isOperator(char) {\n    return /[&|]/.test(char);\n}\nfunction isArgument(char) {\n    return /-/.test(char);\n}\nfunction isString(char) {\n    return /[\"']/.test(char);\n}\nfunction isEnvVar(char) {\n    return isAlpha(char) && char === char.toUpperCase();\n}\nvar TokenType;\n(function (TokenType) {\n    TokenType[\"OR\"] = \"OR\";\n    TokenType[\"AND\"] = \"AND\";\n    TokenType[\"PIPE\"] = \"PIPE\";\n    TokenType[\"Command\"] = \"Command\";\n    TokenType[\"Argument\"] = \"Argument\";\n    TokenType[\"String\"] = \"String\";\n    TokenType[\"EnvVar\"] = \"EnvVar\";\n})(TokenType || (TokenType = {}));\nvar operators = new Map([\n    [\"&&\", { type: TokenType.AND }],\n    [\"||\", { type: TokenType.OR }],\n    [\"|\", { type: TokenType.PIPE }],\n    [\"-\", { type: TokenType.Argument }],\n]);\nfunction tokenize(input) {\n    var current = 0;\n    var tokens = [];\n    function parseCommand() {\n        var value = \"\";\n        while (isCommand(input[current]) && current < input.length) {\n            value += input[current];\n            current++;\n        }\n        return { type: TokenType.Command, value: value };\n    }\n    function parseOperator() {\n        var value = \"\";\n        while (isOperator(input[current]) && current < input.length) {\n            value += input[current];\n            current++;\n        }\n        return operators.get(value);\n    }\n    function parseArgument() {\n        var value = \"\";\n        while ((isArgument(input[current]) || isAlpha(input[current])) &&\n            current < input.length) {\n            value += input[current];\n            current++;\n        }\n        return { type: TokenType.Argument, value: value };\n    }\n    function parseString() {\n        var openCloseQuote = input[current];\n        var value = input[current];\n        current++;\n        while (input[current] !== openCloseQuote && current < input.length) {\n            value += input[current];\n            current++;\n        }\n        value += input[current];\n        current++;\n        return { type: TokenType.String, value: value };\n    }\n    function parseEnvVars() {\n        var value = {};\n        var parseSingleEnv = function () {\n            var key = \"\";\n            var pair = \"\";\n            while (input[current] !== \"=\" && current < input.length) {\n                key += input[current];\n                current++;\n            }\n            // Skip equal\n            if (input[current] === \"=\") {\n                current++;\n            }\n            while (input[current] !== \" \" && current < input.length) {\n                pair += input[current];\n                current++;\n            }\n            value[key] = pair;\n        };\n        while (isEnvVar(input[current]) && current < input.length) {\n            parseSingleEnv();\n            current++;\n        }\n        return { type: TokenType.EnvVar, value: value };\n    }\n    while (current < input.length) {\n        var currentChar = input[current];\n        if (isWhitespace(currentChar)) {\n            current++;\n            continue;\n        }\n        switch (true) {\n            case isEnvVar(currentChar):\n                tokens.push(parseEnvVars());\n                break;\n            case isCommand(currentChar):\n                tokens.push(parseCommand());\n                break;\n            case isOperator(currentChar):\n                tokens.push(parseOperator());\n                break;\n            case isArgument(currentChar):\n                tokens.push(parseArgument());\n                break;\n            case isString(currentChar):\n                tokens.push(parseString());\n                break;\n            default:\n                throw new Error(\"Unknown character: \" + currentChar);\n        }\n    }\n    return tokens;\n}\n\nvar counter = 0;\nfunction generateRandomId() {\n    var now = Date.now();\n    var randomNumber = Math.round(Math.random() * 10000);\n    var count = (counter += 1);\n    return (+(\"\" + now + randomNumber + count)).toString(16);\n}\nvar writeBuffer = function (content) {\n    if (typeof content === \"string\") {\n        return new TextEncoder().encode(content);\n    }\n    else {\n        return content;\n    }\n};\nvar readBuffer = function (content) {\n    if (typeof content === \"string\") {\n        return content;\n    }\n    else {\n        return new TextDecoder().decode(content);\n    }\n};\nvar fromBundlerFilesToFS = function (files) {\n    return Object.entries(files).reduce(function (acc, _a) {\n        var key = _a[0], value = _a[1];\n        acc[key] = writeBuffer(value.code);\n        return acc;\n    }, {});\n};\n/**\n * Figure out which script it must run to start a server\n */\nvar findStartScriptPackageJson = function (packageJson) {\n    var scripts = {};\n    // TODO: support postinstall\n    var possibleKeys = [\"dev\", \"start\"];\n    try {\n        scripts = JSON.parse(packageJson).scripts;\n    }\n    catch (e) {\n        throw createError(\"Could not parse package.json file: \" + e.message);\n    }\n    invariant(scripts, \"Failed to start. Please provide a `start` or `dev` script on the package.json\");\n    var _loop_1 = function (index) {\n        if (possibleKeys[index] in scripts) {\n            var script = possibleKeys[index];\n            var candidate = scripts[script];\n            var env_1 = {};\n            var command_1 = \"\";\n            var args_1 = [];\n            tokenize(candidate).forEach(function (item) {\n                var commandNotFoundYet = command_1 === \"\";\n                if (item.type === TokenType.EnvVar) {\n                    env_1 = item.value;\n                }\n                if (item.type === TokenType.Command && commandNotFoundYet) {\n                    command_1 = item.value;\n                }\n                if (item.type === TokenType.Argument ||\n                    (!commandNotFoundYet && item.type === TokenType.Command)) {\n                    args_1.push(item.value);\n                }\n                // TODO: support TokenType.AND, TokenType.OR, TokenType.PIPE\n            });\n            return { value: [command_1, args_1, { env: env_1 }] };\n        }\n    };\n    for (var index = 0; index < possibleKeys.length; index++) {\n        var state_1 = _loop_1(index);\n        if (typeof state_1 === \"object\")\n            return state_1.value;\n    }\n    throw createError(\"Failed to start. Please provide a `start` or `dev` script on the package.json\");\n};\nvar getMessageFromError = function (error) {\n    if (typeof error === \"string\")\n        return error;\n    if (typeof error === \"object\" && \"message\" in error) {\n        return error.message;\n    }\n    return createError(\"The server could not be reached. Make sure that the node script is running and that a port has been started.\");\n};\n\nexport { EventEmitter as E, getMessageFromError as a, findStartScriptPackageJson as b, fromBundlerFilesToFS as f, generateRandomId as g, readBuffer as r, writeBuffer as w };\n"],
  "mappings": "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",
  "names": ["EventEmitter", "TokenType", "index"]
}
